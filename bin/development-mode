#!/usr/bin/env php
<?php
/**
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2016 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

const CONFIG_CACHE_BASE = 'module-config-cache';

$help = <<< EOH
Enable/Disable development mode.

Usage:

development-mode [-h|--help] disable|enable

--help|-h                    Print this usage message.
disable                      Disable development mode.
enable                       Enable development mode
                             (do not use in production).

To enable development mode, the following file MUST exist:

- config/development.config.php.dist; this file will be copied to
  config/development.config.php

Optionally:

- config/autoload/development.local.php.dist; this file will be copied to
  config/autoload/development.local.php

When disabling development mode:

- config/development.config.php will be removed if it exists
- config/autoload/development.local.php will be removed if it exists

Additionally, both when disabling and enabling development mode, the
script will remove the file cache/module-config-cache.php (or the file
specified by the combination of the module_listener_options.cache_dir
and module_listener_options.config_cache_key options).
EOH;

// Called without arguments
if ($argc < 2) {
    fwrite(STDERR, 'No arguments provided.' . PHP_EOL . PHP_EOL);
    fwrite(STDERR, $help . PHP_EOL);
    exit(1);
}

// Requested help
if (in_array($argv[1], ['-h', '--help'], true)) {
    echo $help, PHP_EOL;
    exit(0);
}

if (! in_array($argv[1], ['disable', 'enable'], true)) {
    fwrite(STDERR, 'Unrecognized argument.' . PHP_EOL . PHP_EOL);
    fwrite(STDERR, $help . PHP_EOL);
    exit(1);
}

$action = $argv[1];
$return = $action();
exit((int) $return);

/**
 * Disable development mode
 *
 * @return int
 */
function disable()
{
    if (! file_exists('config/development.config.php')) {
        // nothing to do
        echo 'Development mode was already disabled.', PHP_EOL;
        return 0;
    }

    if (file_exists('config/autoload/development.local.php')) {
        // optional application config override
        unlink('config/autoload/development.local.php');
    }

    unlink('config/development.config.php');

    removeConfigCacheFile(getConfigCacheFile());

    echo 'Development mode is now disabled.', PHP_EOL;
    return 0;
}

/**
 * Enable development mode
 *
 * @return int
 */
function enable()
{
    if (file_exists('config/development.config.php')) {
        // nothing to do
        echo 'Already in development mode!', PHP_EOL;
        return 0;
    }

    if (! file_exists('config/development.config.php.dist')) {
        fwrite(
            STDERR,
            'MISSING "config/development.config.php.dist". Could not switch to development mode!' . PHP_EOL
        );
        return 1;
    }

    copy('config/development.config.php.dist', 'config/development.config.php');

    if (file_exists('config/autoload/development.local.php.dist')) {
        // optional application config override
        copy('config/autoload/development.local.php.dist', 'config/autoload/development.local.php');
    }

    removeConfigCacheFile(getConfigCacheFile());

    echo 'You are now in development mode.', PHP_EOL;
    return 0;
}

/**
 * Removes the application configuration cache file, if present.
 */
function removeConfigCacheFile($configCacheFile)
{
    if ($configCacheFile && file_exists($configCacheFile)) {
        unlink($configCacheFile);
    }
}

/**
 * Retrieve the config cache file, if any.
 *
 * @return false|string
 */
function getConfigCacheFile()
{
    $configCacheDir = getConfigCacheDir();
    $configCacheKey = getConfigCacheKey();

    if (empty($configCacheDir)) {
        return false;
    }

    $path = sprintf('%s/%s.', $configCacheDir, CONFIG_CACHE_BASE);

    if (! empty($configCacheKey)) {
        $path .= $configCacheKey . '.';
    }

    return $path . 'php';
}

/**
 * Return the configured configuration cache directory, if any.
 *
 * @return null|string
 */
function getConfigCacheDir()
{
    static $dir;

    if ($dir) {
        return $dir;
    }

    $config = getApplicationConfig();
    if (isset($config['module_listener_options']['cache_dir'])
        && ! empty($config['module_listener_options']['cache_dir'])
    ) {
        $dir = $config['module_listener_options']['cache_dir'];
    }

    return $dir;
}

/**
 * Return the configured configuration cache key, if any.
 *
 * @return null|string
 */
function getConfigCacheKey()
{
    static $key;

    if ($key) {
        return $key;
    }

    $config = getApplicationConfig();
    if (isset($config['module_listener_options']['config_cache_key'])
        && ! empty($config['module_listener_options']['config_cache_key'])
    ) {
        $key = $config['module_listener_options']['config_cache_key'];
    }

    return $key;
}

/**
 * Return the application configuration.
 *
 * Memoizes the discovered configuration so subsequent calls can re-use the
 * value.
 *
 * Exits with status code 2 if unable to find the configuration.
 *
 * @return array
 */
function getApplicationConfig()
{
    static $config;

    if ($config) {
        return $config;
    }

    if (! file_exists('config/application.config.php')) {
        fwrite(
            STDERR,
            'Cannot locate config/application.config.php; are you in the' . PHP_EOL
            . 'application root, and is this a zendframework application?' . PHP_EOL
        );
        exit(1);
    }

    $config = include 'config/application.config.php';
    return $config;
}
